{"remainingRequest":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\babel-loader\\lib\\index.js!D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\@jiaminghi\\data-view\\lib\\components\\activeRingChart\\src\\main.vue","mtime":499162500000},{"path":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Java\\No.4-2103\\day0813 05\\day05dubbo+数据大屏项目\\代码\\big-data-v\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-active-ring-chart\">\n    <div class=\"active-ring-chart-container\" ref=\"active-ring-chart\" />\n    <div class=\"active-ring-info\">\n      <dv-digital-flop :config=\"digitalFlop\" />\n      <div class=\"active-ring-name\" :style=\"fontSize\">{{ ringName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Charts from '@jiaminghi/charts'\n\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{ name: '', value: 0 }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description Digital flop unit\n         * @type {String}\n         */\n        digitalFlopUnit: '',\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50,\n        /**\n         * @description showOriginValue\n         * @type {Boolean}\n         * @default showOriginValue = false\n         */\n        showOriginValue: false\n      },\n\n      mergedConfig: null,\n\n      chart: null,\n\n      activeIndex: 0,\n\n      animationHandler: ''\n    }\n  },\n  computed: {\n    digitalFlop() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return {}\n\n      const {\n        digitalFlopStyle,\n        digitalFlopToFixed,\n        data,\n        showOriginValue,\n        digitalFlopUnit\n      } = mergedConfig\n\n      const value = data.map(({ value }) => value)\n\n      let displayValue\n\n      if (showOriginValue) {\n        displayValue = value[activeIndex]\n      } else {\n        const sum = value.reduce((all, v) => all + v, 0)\n\n        const percent = parseFloat((value[activeIndex] / sum) * 100) || 0\n\n        displayValue = percent\n      }\n\n      return {\n        content: showOriginValue ? `{nt}${digitalFlopUnit}` : `{nt}${digitalFlopUnit || '%'}`,\n        number: [displayValue],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      }\n    },\n    ringName() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return ''\n\n      return mergedConfig.data[activeIndex].name\n    },\n    fontSize() {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`\n    }\n  },\n  watch: {\n    config() {\n      const { animationHandler, mergeConfig, setRingOption } = this\n\n      clearTimeout(animationHandler)\n\n      this.activeIndex = 0\n\n      mergeConfig()\n\n      setRingOption()\n    }\n  },\n  methods: {\n    init() {\n      const { initChart, mergeConfig, setRingOption } = this\n\n      initChart()\n\n      mergeConfig()\n\n      setRingOption()\n    },\n    initChart() {\n      const { $refs } = this\n\n      this.chart = new Charts($refs['active-ring-chart'])\n    },\n    mergeConfig() {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(\n        deepClone(defaultConfig, true),\n        config || {}\n      )\n    },\n    setRingOption() {\n      const { getRingOption, chart, ringAnimation } = this\n\n      const option = getRingOption()\n\n      chart.setOption(option, true)\n\n      ringAnimation()\n    },\n    getRingOption() {\n      const { mergedConfig, getRealRadius } = this\n\n      const radius = getRealRadius()\n\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius\n      })\n\n      return {\n        series: [\n          {\n            type: 'pie',\n            ...mergedConfig,\n            outsideLabel: {\n              show: false\n            }\n          }\n        ],\n        color: mergedConfig.color\n      }\n    },\n    getRealRadius(active = false) {\n      const { mergedConfig, chart } = this\n\n      const { radius, activeRadius, lineWidth } = mergedConfig\n\n      const maxRadius = Math.min(...chart.render.area) / 2\n\n      const halfLineWidth = lineWidth / 2\n\n      let realRadius = active ? activeRadius : radius\n\n      if (typeof realRadius !== 'number')\n        realRadius = (parseInt(realRadius) / 100) * maxRadius\n\n      const insideRadius = realRadius - halfLineWidth\n      const outSideRadius = realRadius + halfLineWidth\n\n      return [insideRadius, outSideRadius]\n    },\n    ringAnimation() {\n      let { activeIndex, getRingOption, chart, getRealRadius } = this\n\n      const radius = getRealRadius()\n      const active = getRealRadius(true)\n\n      const option = getRingOption()\n\n      const { data } = option.series[0]\n\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active\n        } else {\n          dataItem.radius = radius\n        }\n      })\n\n      chart.setOption(option, true)\n\n      const { activeTimeGap } = option.series[0]\n\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1\n\n        if (activeIndex >= data.length) activeIndex = 0\n\n        this.activeIndex = activeIndex\n\n        this.ringAnimation()\n      }, activeTimeGap)\n    }\n  },\n  mounted() {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy() {\n    const { animationHandler } = this\n\n    clearTimeout(animationHandler)\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/activeRingChart/src"}]}